package com.trinary.rmmv.util;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;

import com.trinary.rmmv.client.PluginClient;
import com.trinary.rmmv.client.PluginVersionClient;
import com.trinary.rmmv.client.RMMVClientConfig;
import com.trinary.rmmv.util.analysis.ProjectAnalyzer;
import com.trinary.rmmv.util.analysis.types.PluginDescriptor;
import com.trinary.rmmv.util.types.ProjectRO;
import com.trinary.rpgmaker.ro.PluginRO;

public class PluginIOHelper {
	protected PluginClient pluginClient;
	protected PluginVersionClient versionClient;
	protected ProjectAnalyzer projectAnalyzer;
	protected ObjectMapper mapper = new ObjectMapper();
	
	public PluginIOHelper(RMMVClientConfig config) {
		versionClient = new PluginVersionClient(config);
		pluginClient = new PluginClient(config);
		projectAnalyzer = new ProjectAnalyzer(config);
	}
	
	public void deletePlugin(ProjectRO project, PluginRO plugin) {
		System.out.println("Deleting    " + plugin.getFilename() + " (" + plugin.getVersion() + ")");
		
		String location = project.getPath() + "/js/plugins/";
		File file = new File(location + plugin.getFilename());
		file.delete();
	}
	
	public void storePlugin(ProjectRO project, PluginRO plugin) throws IOException {
		storePlugin(project, plugin, true);
	}
	
	public void storePlugin(ProjectRO project, PluginRO plugin, Boolean enableAfterStore) throws IOException {
		System.out.println("Downloading " + plugin.getFilename() + " (" + plugin.getVersion() + ")");
		
		String location = project.getPath() + "/js/plugins/";
		String script = null;
		try {
			script = versionClient.getScript(plugin);
		} catch (Exception e1) {
			e1.printStackTrace();
			return;
		}
	
		FileWriter writer = new FileWriter(location + plugin.getFilename());
		writer.write(script);
		writer.close();
		
		if (enableAfterStore) {
			project = projectAnalyzer.analyzeProject(project.getPath());
			enablePlugin(project, plugin);
		}
	}
	
	public void storeDependencies(ProjectRO project, PluginRO plugin) throws IOException {
		storeDependencies(project, plugin, true);
	}
	
	public void storeDependencies(ProjectRO project, PluginRO plugin, Boolean enableAfterStore) throws IOException {
		List<PluginRO> dependencies;
		try {
			dependencies = versionClient.getDependencies(plugin);
		} catch (Exception e2) {
			e2.printStackTrace();
			return;
		}
		
		for (PluginRO dependency : dependencies) {
			storePlugin(project, dependency, enableAfterStore);
			storeDependencies(project, dependency, enableAfterStore);
		}
	}
	
	public void enablePlugin(ProjectRO project, PluginRO plugin) throws IOException {
		enablePlugin(project, plugin.getFilename());
	}
	
	public void disablePlugin(ProjectRO project, PluginRO plugin) throws IOException {
		disablePlugin(project, plugin.getFilename());
	}
	
	public void enablePlugin(ProjectRO project, String filename) throws IOException {
		if (project.getPluginDescriptor(filename) != null) {
			project.getPluginDescriptor(filename).setStatus(true);
		} else {
			PluginDescriptor defaultDescriptor = project.getDefaultPluginDescriptor(filename);
			
			if (defaultDescriptor != null) {
				defaultDescriptor.setStatus(true);
				project.getPluginDescriptors().put(filename, defaultDescriptor);
			}
		}
		
		writePluginDescriptorFile(project);
	}
	
	public void disablePlugin(ProjectRO project, String filename) throws IOException {
		if (project.getPluginDescriptor(filename) != null) {
			project.getPluginDescriptor(filename).setStatus(false);
		}
		
		writePluginDescriptorFile(project);
	}
	
	public void writePluginDescriptorFile(ProjectRO project) throws IOException {
		File file = new File(project.getPath() + "/js/plugins.js");
		
		FileWriter writer = new FileWriter(file);
		writer.write(generatePluginDescriptorFile(project));
		writer.close();
	}
	
	public String generatePluginDescriptorFile(ProjectRO project) {
		StringBuilder objectString = new StringBuilder();
		String sep = "";
		
		objectString
			.append("// Generated by RPG Maker.\n")
			.append("// Do not edit this file directly.\n")
			.append("var $plugins=\n")
			.append("[\n");
		for (PluginDescriptor descriptor : project.getPluginDescriptors().values()) {
			String jsonString;
			try {
				jsonString = mapper.writeValueAsString(descriptor);
				objectString.append(String.format("%s%s", sep, jsonString));
				sep = ",\n";
			} catch (JsonGenerationException e) {
				e.printStackTrace();
			} catch (JsonMappingException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		return objectString.append("\n];").toString();
	}
}